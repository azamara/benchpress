import { bind, Injector, OpaqueToken } from 'angular2/src/core/di';
import { StringMapWrapper } from 'angular2/src/facade/collection';
import { PromiseWrapper } from 'angular2/src/facade/async';
import { Metric } from '../metric';
export class MultiMetric extends Metric {
    constructor(_metrics) {
        super();
        this._metrics = _metrics;
    }
    static createBindings(childTokens) {
        return [
            bind(_CHILDREN)
                .toFactory((injector) => childTokens.map(token => injector.get(token)), [Injector]),
            bind(MultiMetric).toFactory(children => new MultiMetric(children), [_CHILDREN])
        ];
    }
    /**
     * Starts measuring
     */
    beginMeasure() {
        return PromiseWrapper.all(this._metrics.map(metric => metric.beginMeasure()));
    }
    /**
     * Ends measuring and reports the data
     * since the begin call.
     * @param restart: Whether to restart right after this.
     */
    endMeasure(restart) {
        return PromiseWrapper.all(this._metrics.map(metric => metric.endMeasure(restart)))
            .then(values => mergeStringMaps(values));
    }
    /**
     * Describes the metrics provided by this metric implementation.
     * (e.g. units, ...)
     */
    describe() {
        return mergeStringMaps(this._metrics.map((metric) => metric.describe()));
    }
}
function mergeStringMaps(maps) {
    var result = {};
    maps.forEach(map => { StringMapWrapper.forEach(map, (value, prop) => { result[prop] = value; }); });
    return result;
}
var _CHILDREN = new OpaqueToken('MultiMetric.children');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGlfbWV0cmljLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYmVuY2hwcmVzcy9zcmMvbWV0cmljL211bHRpX21ldHJpYy50cyJdLCJuYW1lcyI6WyJNdWx0aU1ldHJpYyIsIk11bHRpTWV0cmljLmNvbnN0cnVjdG9yIiwiTXVsdGlNZXRyaWMuY3JlYXRlQmluZGluZ3MiLCJNdWx0aU1ldHJpYy5iZWdpbk1lYXN1cmUiLCJNdWx0aU1ldHJpYy5lbmRNZWFzdXJlIiwiTXVsdGlNZXRyaWMuZGVzY3JpYmUiLCJtZXJnZVN0cmluZ01hcHMiXSwibWFwcGluZ3MiOiJPQUFPLEVBQUMsSUFBSSxFQUE4QixRQUFRLEVBQUUsV0FBVyxFQUFDLE1BQU0sc0JBQXNCO09BQ3JGLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSxnQ0FBZ0M7T0FDeEQsRUFBVSxjQUFjLEVBQUMsTUFBTSwyQkFBMkI7T0FFMUQsRUFBQyxNQUFNLEVBQUMsTUFBTSxXQUFXO0FBRWhDLGlDQUFpQyxNQUFNO0lBVXJDQSxZQUFvQkEsUUFBa0JBO1FBQUlDLE9BQU9BLENBQUNBO1FBQTlCQSxhQUFRQSxHQUFSQSxRQUFRQSxDQUFVQTtJQUFhQSxDQUFDQTtJQVRwREQsT0FBT0EsY0FBY0EsQ0FBQ0EsV0FBa0JBO1FBQ3RDRSxNQUFNQSxDQUFDQTtZQUNMQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQTtpQkFDVkEsU0FBU0EsQ0FBQ0EsQ0FBQ0EsUUFBa0JBLEtBQUtBLFdBQVdBLENBQUNBLEdBQUdBLENBQUNBLEtBQUtBLElBQUlBLFFBQVFBLENBQUNBLEdBQUdBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLEVBQ3JFQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQTtZQUMxQkEsSUFBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsQ0FBQ0EsU0FBU0EsQ0FBQ0EsUUFBUUEsSUFBSUEsSUFBSUEsV0FBV0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0E7U0FDaEZBLENBQUNBO0lBQ0pBLENBQUNBO0lBSURGOztPQUVHQTtJQUNIQSxZQUFZQTtRQUNWRyxNQUFNQSxDQUFDQSxjQUFjQSxDQUFDQSxHQUFHQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxHQUFHQSxDQUFDQSxNQUFNQSxJQUFJQSxNQUFNQSxDQUFDQSxZQUFZQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTtJQUNoRkEsQ0FBQ0E7SUFFREg7Ozs7T0FJR0E7SUFDSEEsVUFBVUEsQ0FBQ0EsT0FBZ0JBO1FBQ3pCSSxNQUFNQSxDQUFDQSxjQUFjQSxDQUFDQSxHQUFHQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxHQUFHQSxDQUFDQSxNQUFNQSxJQUFJQSxNQUFNQSxDQUFDQSxVQUFVQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQSxDQUFDQTthQUM3RUEsSUFBSUEsQ0FBQ0EsTUFBTUEsSUFBSUEsZUFBZUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFDL0NBLENBQUNBO0lBRURKOzs7T0FHR0E7SUFDSEEsUUFBUUE7UUFDTkssTUFBTUEsQ0FBQ0EsZUFBZUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsTUFBTUEsS0FBS0EsTUFBTUEsQ0FBQ0EsUUFBUUEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFDM0VBLENBQUNBO0FBQ0hMLENBQUNBO0FBRUQseUJBQXlCLElBQWlDO0lBQ3hETSxJQUFJQSxNQUFNQSxHQUFHQSxFQUFFQSxDQUFDQTtJQUNoQkEsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FDUkEsR0FBR0EsTUFBTUEsZ0JBQWdCQSxDQUFDQSxPQUFPQSxDQUFDQSxHQUFHQSxFQUFFQSxDQUFDQSxLQUFLQSxFQUFFQSxJQUFJQSxPQUFPQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtJQUMzRkEsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0E7QUFDaEJBLENBQUNBO0FBRUQsSUFBSSxTQUFTLEdBQUcsSUFBSSxXQUFXLENBQUMsc0JBQXNCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7YmluZCwgcHJvdmlkZSwgQmluZGluZywgUHJvdmlkZXIsIEluamVjdG9yLCBPcGFxdWVUb2tlbn0gZnJvbSAnYW5ndWxhcjIvc3JjL2NvcmUvZGknO1xuaW1wb3J0IHtTdHJpbmdNYXBXcmFwcGVyfSBmcm9tICdhbmd1bGFyMi9zcmMvZmFjYWRlL2NvbGxlY3Rpb24nO1xuaW1wb3J0IHtQcm9taXNlLCBQcm9taXNlV3JhcHBlcn0gZnJvbSAnYW5ndWxhcjIvc3JjL2ZhY2FkZS9hc3luYyc7XG5cbmltcG9ydCB7TWV0cmljfSBmcm9tICcuLi9tZXRyaWMnO1xuXG5leHBvcnQgY2xhc3MgTXVsdGlNZXRyaWMgZXh0ZW5kcyBNZXRyaWMge1xuICBzdGF0aWMgY3JlYXRlQmluZGluZ3MoY2hpbGRUb2tlbnM6IGFueVtdKTogUHJvdmlkZXJbXSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIGJpbmQoX0NISUxEUkVOKVxuICAgICAgICAgIC50b0ZhY3RvcnkoKGluamVjdG9yOiBJbmplY3RvcikgPT4gY2hpbGRUb2tlbnMubWFwKHRva2VuID0+IGluamVjdG9yLmdldCh0b2tlbikpLFxuICAgICAgICAgICAgICAgICAgICAgW0luamVjdG9yXSksXG4gICAgICBiaW5kKE11bHRpTWV0cmljKS50b0ZhY3RvcnkoY2hpbGRyZW4gPT4gbmV3IE11bHRpTWV0cmljKGNoaWxkcmVuKSwgW19DSElMRFJFTl0pXG4gICAgXTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX21ldHJpY3M6IE1ldHJpY1tdKSB7IHN1cGVyKCk7IH1cblxuICAvKipcbiAgICogU3RhcnRzIG1lYXN1cmluZ1xuICAgKi9cbiAgYmVnaW5NZWFzdXJlKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuIFByb21pc2VXcmFwcGVyLmFsbCh0aGlzLl9tZXRyaWNzLm1hcChtZXRyaWMgPT4gbWV0cmljLmJlZ2luTWVhc3VyZSgpKSk7XG4gIH1cblxuICAvKipcbiAgICogRW5kcyBtZWFzdXJpbmcgYW5kIHJlcG9ydHMgdGhlIGRhdGFcbiAgICogc2luY2UgdGhlIGJlZ2luIGNhbGwuXG4gICAqIEBwYXJhbSByZXN0YXJ0OiBXaGV0aGVyIHRvIHJlc3RhcnQgcmlnaHQgYWZ0ZXIgdGhpcy5cbiAgICovXG4gIGVuZE1lYXN1cmUocmVzdGFydDogYm9vbGVhbik6IFByb21pc2U8e1trZXk6IHN0cmluZ106IGFueX0+IHtcbiAgICByZXR1cm4gUHJvbWlzZVdyYXBwZXIuYWxsKHRoaXMuX21ldHJpY3MubWFwKG1ldHJpYyA9PiBtZXRyaWMuZW5kTWVhc3VyZShyZXN0YXJ0KSkpXG4gICAgICAgIC50aGVuKHZhbHVlcyA9PiBtZXJnZVN0cmluZ01hcHModmFsdWVzKSk7XG4gIH1cblxuICAvKipcbiAgICogRGVzY3JpYmVzIHRoZSBtZXRyaWNzIHByb3ZpZGVkIGJ5IHRoaXMgbWV0cmljIGltcGxlbWVudGF0aW9uLlxuICAgKiAoZS5nLiB1bml0cywgLi4uKVxuICAgKi9cbiAgZGVzY3JpYmUoKToge1trZXk6IHN0cmluZ106IGFueX0ge1xuICAgIHJldHVybiBtZXJnZVN0cmluZ01hcHModGhpcy5fbWV0cmljcy5tYXAoKG1ldHJpYykgPT4gbWV0cmljLmRlc2NyaWJlKCkpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtZXJnZVN0cmluZ01hcHMobWFwczogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfVtdKTogT2JqZWN0IHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBtYXBzLmZvckVhY2goXG4gICAgICBtYXAgPT4geyBTdHJpbmdNYXBXcmFwcGVyLmZvckVhY2gobWFwLCAodmFsdWUsIHByb3ApID0+IHsgcmVzdWx0W3Byb3BdID0gdmFsdWU7IH0pOyB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxudmFyIF9DSElMRFJFTiA9IG5ldyBPcGFxdWVUb2tlbignTXVsdGlNZXRyaWMuY2hpbGRyZW4nKTtcbiJdfQ==