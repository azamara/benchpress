import { bind, Injector, OpaqueToken } from 'angular2/src/core/di';
import { isBlank } from 'angular2/src/facade/lang';
import { BaseException } from 'angular2/src/facade/exceptions';
import { Options } from './common_options';
/**
 * A WebDriverExtension implements extended commands of the webdriver protocol
 * for a given browser, independent of the WebDriverAdapter.
 * Needs one implementation for every supported Browser.
 */
export class WebDriverExtension {
    static bindTo(childTokens) {
        var res = [
            bind(_CHILDREN)
                .toFactory((injector) => childTokens.map(token => injector.get(token)), [Injector]),
            bind(WebDriverExtension)
                .toFactory((children, capabilities) => {
                var delegate;
                children.forEach(extension => {
                    if (extension.supports(capabilities)) {
                        delegate = extension;
                    }
                });
                if (isBlank(delegate)) {
                    throw new BaseException('Could not find a delegate for given capabilities!');
                }
                return delegate;
            }, [_CHILDREN, Options.CAPABILITIES])
        ];
        return res;
    }
    gc() { throw new BaseException('NYI'); }
    timeBegin(name) { throw new BaseException('NYI'); }
    timeEnd(name, restartName) { throw new BaseException('NYI'); }
    /**
     * Format:
     * - cat: category of the event
     * - name: event name: 'script', 'gc', 'render', ...
     * - ph: phase: 'B' (begin), 'E' (end), 'b' (nestable start), 'e' (nestable end), 'X' (Complete
     *event)
     * - ts: timestamp in ms, e.g. 12345
     * - pid: process id
     * - args: arguments, e.g. {heapSize: 1234}
     *
     * Based on [Chrome Trace Event
     *Format](https://docs.google.com/document/d/1CvAClvFfyA5R-PhYUmn5OOQtYMH4h6I0nSsKchNAySU/edit)
     **/
    readPerfLog() { throw new BaseException('NYI'); }
    perfLogFeatures() { throw new BaseException('NYI'); }
    supports(capabilities) { return true; }
}
export class PerfLogFeatures {
    constructor({ render = false, gc = false, frameCapture = false, userTiming = false } = {}) {
        this.render = render;
        this.gc = gc;
        this.frameCapture = frameCapture;
        this.userTiming = userTiming;
    }
}
var _CHILDREN = new OpaqueToken('WebDriverExtension.children');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2ViX2RyaXZlcl9leHRlbnNpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJiZW5jaHByZXNzL3NyYy93ZWJfZHJpdmVyX2V4dGVuc2lvbi50cyJdLCJuYW1lcyI6WyJXZWJEcml2ZXJFeHRlbnNpb24iLCJXZWJEcml2ZXJFeHRlbnNpb24uYmluZFRvIiwiV2ViRHJpdmVyRXh0ZW5zaW9uLmdjIiwiV2ViRHJpdmVyRXh0ZW5zaW9uLnRpbWVCZWdpbiIsIldlYkRyaXZlckV4dGVuc2lvbi50aW1lRW5kIiwiV2ViRHJpdmVyRXh0ZW5zaW9uLnJlYWRQZXJmTG9nIiwiV2ViRHJpdmVyRXh0ZW5zaW9uLnBlcmZMb2dGZWF0dXJlcyIsIldlYkRyaXZlckV4dGVuc2lvbi5zdXBwb3J0cyIsIlBlcmZMb2dGZWF0dXJlcyIsIlBlcmZMb2dGZWF0dXJlcy5jb25zdHJ1Y3RvciJdLCJtYXBwaW5ncyI6Ik9BQU8sRUFBQyxJQUFJLEVBQXFCLFFBQVEsRUFBRSxXQUFXLEVBQUMsTUFBTSxzQkFBc0I7T0FFNUUsRUFBQyxPQUFPLEVBQVksTUFBTSwwQkFBMEI7T0FDcEQsRUFBQyxhQUFhLEVBQW1CLE1BQU0sZ0NBQWdDO09BR3ZFLEVBQUMsT0FBTyxFQUFDLE1BQU0sa0JBQWtCO0FBRXhDOzs7O0dBSUc7QUFDSDtJQUNFQSxPQUFPQSxNQUFNQSxDQUFDQSxXQUFrQkE7UUFDOUJDLElBQUlBLEdBQUdBLEdBQUdBO1lBQ1JBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBO2lCQUNWQSxTQUFTQSxDQUFDQSxDQUFDQSxRQUFrQkEsS0FBS0EsV0FBV0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsS0FBS0EsSUFBSUEsUUFBUUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsRUFDckVBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBO1lBQzFCQSxJQUFJQSxDQUFDQSxrQkFBa0JBLENBQUNBO2lCQUNuQkEsU0FBU0EsQ0FDTkEsQ0FBQ0EsUUFBOEJBLEVBQUVBLFlBQVlBO2dCQUMzQ0EsSUFBSUEsUUFBUUEsQ0FBQ0E7Z0JBQ2JBLFFBQVFBLENBQUNBLE9BQU9BLENBQUNBLFNBQVNBO29CQUN4QkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsU0FBU0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7d0JBQ3JDQSxRQUFRQSxHQUFHQSxTQUFTQSxDQUFDQTtvQkFDdkJBLENBQUNBO2dCQUNIQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDSEEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQ3RCQSxNQUFNQSxJQUFJQSxhQUFhQSxDQUFDQSxtREFBbURBLENBQUNBLENBQUNBO2dCQUMvRUEsQ0FBQ0E7Z0JBQ0RBLE1BQU1BLENBQUNBLFFBQVFBLENBQUNBO1lBQ2xCQSxDQUFDQSxFQUNEQSxDQUFDQSxTQUFTQSxFQUFFQSxPQUFPQSxDQUFDQSxZQUFZQSxDQUFDQSxDQUFDQTtTQUMzQ0EsQ0FBQ0E7UUFDRkEsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0E7SUFDYkEsQ0FBQ0E7SUFFREQsRUFBRUEsS0FBbUJFLE1BQU1BLElBQUlBLGFBQWFBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO0lBRXRERixTQUFTQSxDQUFDQSxJQUFZQSxJQUFrQkcsTUFBTUEsSUFBSUEsYUFBYUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFFekVILE9BQU9BLENBQUNBLElBQVlBLEVBQUVBLFdBQW1CQSxJQUFrQkksTUFBTUEsSUFBSUEsYUFBYUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFFNUZKOzs7Ozs7Ozs7Ozs7UUFZSUE7SUFDSkEsV0FBV0EsS0FBcUJLLE1BQU1BLElBQUlBLGFBQWFBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO0lBRWpFTCxlQUFlQSxLQUFzQk0sTUFBTUEsSUFBSUEsYUFBYUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFFdEVOLFFBQVFBLENBQUNBLFlBQWtDQSxJQUFhTyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQTtBQUN4RVAsQ0FBQ0E7QUFFRDtJQU1FUSxZQUNJQSxFQUFDQSxNQUFNQSxHQUFHQSxLQUFLQSxFQUFFQSxFQUFFQSxHQUFHQSxLQUFLQSxFQUFFQSxZQUFZQSxHQUFHQSxLQUFLQSxFQUFFQSxVQUFVQSxHQUFHQSxLQUFLQSxFQUFDQSxHQUNlQSxFQUFFQTtRQUN6RkMsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsTUFBTUEsQ0FBQ0E7UUFDckJBLElBQUlBLENBQUNBLEVBQUVBLEdBQUdBLEVBQUVBLENBQUNBO1FBQ2JBLElBQUlBLENBQUNBLFlBQVlBLEdBQUdBLFlBQVlBLENBQUNBO1FBQ2pDQSxJQUFJQSxDQUFDQSxVQUFVQSxHQUFHQSxVQUFVQSxDQUFDQTtJQUMvQkEsQ0FBQ0E7QUFDSEQsQ0FBQ0E7QUFFRCxJQUFJLFNBQVMsR0FBRyxJQUFJLFdBQVcsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtiaW5kLCBwcm92aWRlLCBQcm92aWRlciwgSW5qZWN0b3IsIE9wYXF1ZVRva2VufSBmcm9tICdhbmd1bGFyMi9zcmMvY29yZS9kaSc7XG5cbmltcG9ydCB7aXNCbGFuaywgaXNQcmVzZW50fSBmcm9tICdhbmd1bGFyMi9zcmMvZmFjYWRlL2xhbmcnO1xuaW1wb3J0IHtCYXNlRXhjZXB0aW9uLCBXcmFwcGVkRXhjZXB0aW9ufSBmcm9tICdhbmd1bGFyMi9zcmMvZmFjYWRlL2V4Y2VwdGlvbnMnO1xuaW1wb3J0IHtQcm9taXNlLCBQcm9taXNlV3JhcHBlcn0gZnJvbSAnYW5ndWxhcjIvc3JjL2ZhY2FkZS9hc3luYyc7XG5cbmltcG9ydCB7T3B0aW9uc30gZnJvbSAnLi9jb21tb25fb3B0aW9ucyc7XG5cbi8qKlxuICogQSBXZWJEcml2ZXJFeHRlbnNpb24gaW1wbGVtZW50cyBleHRlbmRlZCBjb21tYW5kcyBvZiB0aGUgd2ViZHJpdmVyIHByb3RvY29sXG4gKiBmb3IgYSBnaXZlbiBicm93c2VyLCBpbmRlcGVuZGVudCBvZiB0aGUgV2ViRHJpdmVyQWRhcHRlci5cbiAqIE5lZWRzIG9uZSBpbXBsZW1lbnRhdGlvbiBmb3IgZXZlcnkgc3VwcG9ydGVkIEJyb3dzZXIuXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBXZWJEcml2ZXJFeHRlbnNpb24ge1xuICBzdGF0aWMgYmluZFRvKGNoaWxkVG9rZW5zOiBhbnlbXSk6IFByb3ZpZGVyW10ge1xuICAgIHZhciByZXMgPSBbXG4gICAgICBiaW5kKF9DSElMRFJFTilcbiAgICAgICAgICAudG9GYWN0b3J5KChpbmplY3RvcjogSW5qZWN0b3IpID0+IGNoaWxkVG9rZW5zLm1hcCh0b2tlbiA9PiBpbmplY3Rvci5nZXQodG9rZW4pKSxcbiAgICAgICAgICAgICAgICAgICAgIFtJbmplY3Rvcl0pLFxuICAgICAgYmluZChXZWJEcml2ZXJFeHRlbnNpb24pXG4gICAgICAgICAgLnRvRmFjdG9yeShcbiAgICAgICAgICAgICAgKGNoaWxkcmVuOiBXZWJEcml2ZXJFeHRlbnNpb25bXSwgY2FwYWJpbGl0aWVzKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIGRlbGVnYXRlO1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuLmZvckVhY2goZXh0ZW5zaW9uID0+IHtcbiAgICAgICAgICAgICAgICAgIGlmIChleHRlbnNpb24uc3VwcG9ydHMoY2FwYWJpbGl0aWVzKSkge1xuICAgICAgICAgICAgICAgICAgICBkZWxlZ2F0ZSA9IGV4dGVuc2lvbjtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAoaXNCbGFuayhkZWxlZ2F0ZSkpIHtcbiAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBCYXNlRXhjZXB0aW9uKCdDb3VsZCBub3QgZmluZCBhIGRlbGVnYXRlIGZvciBnaXZlbiBjYXBhYmlsaXRpZXMhJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgW19DSElMRFJFTiwgT3B0aW9ucy5DQVBBQklMSVRJRVNdKVxuICAgIF07XG4gICAgcmV0dXJuIHJlcztcbiAgfVxuXG4gIGdjKCk6IFByb21pc2U8YW55PiB7IHRocm93IG5ldyBCYXNlRXhjZXB0aW9uKCdOWUknKTsgfVxuXG4gIHRpbWVCZWdpbihuYW1lOiBzdHJpbmcpOiBQcm9taXNlPGFueT4geyB0aHJvdyBuZXcgQmFzZUV4Y2VwdGlvbignTllJJyk7IH1cblxuICB0aW1lRW5kKG5hbWU6IHN0cmluZywgcmVzdGFydE5hbWU6IHN0cmluZyk6IFByb21pc2U8YW55PiB7IHRocm93IG5ldyBCYXNlRXhjZXB0aW9uKCdOWUknKTsgfVxuXG4gIC8qKlxuICAgKiBGb3JtYXQ6XG4gICAqIC0gY2F0OiBjYXRlZ29yeSBvZiB0aGUgZXZlbnRcbiAgICogLSBuYW1lOiBldmVudCBuYW1lOiAnc2NyaXB0JywgJ2djJywgJ3JlbmRlcicsIC4uLlxuICAgKiAtIHBoOiBwaGFzZTogJ0InIChiZWdpbiksICdFJyAoZW5kKSwgJ2InIChuZXN0YWJsZSBzdGFydCksICdlJyAobmVzdGFibGUgZW5kKSwgJ1gnIChDb21wbGV0ZVxuICAgKmV2ZW50KVxuICAgKiAtIHRzOiB0aW1lc3RhbXAgaW4gbXMsIGUuZy4gMTIzNDVcbiAgICogLSBwaWQ6IHByb2Nlc3MgaWRcbiAgICogLSBhcmdzOiBhcmd1bWVudHMsIGUuZy4ge2hlYXBTaXplOiAxMjM0fVxuICAgKlxuICAgKiBCYXNlZCBvbiBbQ2hyb21lIFRyYWNlIEV2ZW50XG4gICAqRm9ybWF0XShodHRwczovL2RvY3MuZ29vZ2xlLmNvbS9kb2N1bWVudC9kLzFDdkFDbHZGZnlBNVItUGhZVW1uNU9PUXRZTUg0aDZJMG5Tc0tjaE5BeVNVL2VkaXQpXG4gICAqKi9cbiAgcmVhZFBlcmZMb2coKTogUHJvbWlzZTxhbnlbXT4geyB0aHJvdyBuZXcgQmFzZUV4Y2VwdGlvbignTllJJyk7IH1cblxuICBwZXJmTG9nRmVhdHVyZXMoKTogUGVyZkxvZ0ZlYXR1cmVzIHsgdGhyb3cgbmV3IEJhc2VFeGNlcHRpb24oJ05ZSScpOyB9XG5cbiAgc3VwcG9ydHMoY2FwYWJpbGl0aWVzOiB7W2tleTogc3RyaW5nXTogYW55fSk6IGJvb2xlYW4geyByZXR1cm4gdHJ1ZTsgfVxufVxuXG5leHBvcnQgY2xhc3MgUGVyZkxvZ0ZlYXR1cmVzIHtcbiAgcmVuZGVyOiBib29sZWFuO1xuICBnYzogYm9vbGVhbjtcbiAgZnJhbWVDYXB0dXJlOiBib29sZWFuO1xuICB1c2VyVGltaW5nOiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgICAge3JlbmRlciA9IGZhbHNlLCBnYyA9IGZhbHNlLCBmcmFtZUNhcHR1cmUgPSBmYWxzZSwgdXNlclRpbWluZyA9IGZhbHNlfTpcbiAgICAgICAgICB7cmVuZGVyPzogYm9vbGVhbiwgZ2M/OiBib29sZWFuLCBmcmFtZUNhcHR1cmU/OiBib29sZWFuLCB1c2VyVGltaW5nPzogYm9vbGVhbn0gPSB7fSkge1xuICAgIHRoaXMucmVuZGVyID0gcmVuZGVyO1xuICAgIHRoaXMuZ2MgPSBnYztcbiAgICB0aGlzLmZyYW1lQ2FwdHVyZSA9IGZyYW1lQ2FwdHVyZTtcbiAgICB0aGlzLnVzZXJUaW1pbmcgPSB1c2VyVGltaW5nO1xuICB9XG59XG5cbnZhciBfQ0hJTERSRU4gPSBuZXcgT3BhcXVlVG9rZW4oJ1dlYkRyaXZlckV4dGVuc2lvbi5jaGlsZHJlbicpO1xuIl19