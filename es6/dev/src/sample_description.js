import { StringMapWrapper } from 'angular2/src/facade/collection';
import { bind } from 'angular2/src/core/di';
import { Validator } from './validator';
import { Metric } from './metric';
import { Options } from './common_options';
/**
 * SampleDescription merges all available descriptions about a sample
 */
export class SampleDescription {
    constructor(id, descriptions, metrics) {
        this.id = id;
        this.metrics = metrics;
        this.description = {};
        descriptions.forEach(description => {
            StringMapWrapper.forEach(description, (value, prop) => this.description[prop] = value);
        });
    }
    // TODO(tbosch): use static values when our transpiler supports them
    static get BINDINGS() { return _PROVIDERS; }
    toJson() { return { 'id': this.id, 'description': this.description, 'metrics': this.metrics }; }
}
var _PROVIDERS = [
    bind(SampleDescription)
        .toFactory((metric, id, forceGc, userAgent, validator, defaultDesc, userDesc) => new SampleDescription(id, [
        { 'forceGc': forceGc, 'userAgent': userAgent },
        validator.describe(),
        defaultDesc,
        userDesc
    ], metric.describe()), [
        Metric,
        Options.SAMPLE_ID,
        Options.FORCE_GC,
        Options.USER_AGENT,
        Validator,
        Options.DEFAULT_DESCRIPTION,
        Options.SAMPLE_DESCRIPTION
    ])
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FtcGxlX2Rlc2NyaXB0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYmVuY2hwcmVzcy9zcmMvc2FtcGxlX2Rlc2NyaXB0aW9uLnRzIl0sIm5hbWVzIjpbIlNhbXBsZURlc2NyaXB0aW9uIiwiU2FtcGxlRGVzY3JpcHRpb24uY29uc3RydWN0b3IiLCJTYW1wbGVEZXNjcmlwdGlvbi5CSU5ESU5HUyIsIlNhbXBsZURlc2NyaXB0aW9uLnRvSnNvbiJdLCJtYXBwaW5ncyI6Ik9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLGdDQUFnQztPQUN4RCxFQUFDLElBQUksRUFBaUMsTUFBTSxzQkFBc0I7T0FDbEUsRUFBQyxTQUFTLEVBQUMsTUFBTSxhQUFhO09BQzlCLEVBQUMsTUFBTSxFQUFDLE1BQU0sVUFBVTtPQUN4QixFQUFDLE9BQU8sRUFBQyxNQUFNLGtCQUFrQjtBQUV4Qzs7R0FFRztBQUNIO0lBS0VBLFlBQW1CQSxFQUFVQSxFQUFFQSxZQUF5Q0EsRUFDckRBLE9BQTZCQTtRQUQ3QkMsT0FBRUEsR0FBRkEsRUFBRUEsQ0FBUUE7UUFDVkEsWUFBT0EsR0FBUEEsT0FBT0EsQ0FBc0JBO1FBQzlDQSxJQUFJQSxDQUFDQSxXQUFXQSxHQUFHQSxFQUFFQSxDQUFDQTtRQUN0QkEsWUFBWUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsV0FBV0E7WUFDOUJBLGdCQUFnQkEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsV0FBV0EsRUFBRUEsQ0FBQ0EsS0FBS0EsRUFBRUEsSUFBSUEsS0FBS0EsSUFBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7UUFDekZBLENBQUNBLENBQUNBLENBQUNBO0lBQ0xBLENBQUNBO0lBVkRELG9FQUFvRUE7SUFDcEVBLFdBQVdBLFFBQVFBLEtBQWlCRSxNQUFNQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQSxDQUFDQTtJQVd4REYsTUFBTUEsS0FBS0csTUFBTUEsQ0FBQ0EsRUFBQ0EsSUFBSUEsRUFBRUEsSUFBSUEsQ0FBQ0EsRUFBRUEsRUFBRUEsYUFBYUEsRUFBRUEsSUFBSUEsQ0FBQ0EsV0FBV0EsRUFBRUEsU0FBU0EsRUFBRUEsSUFBSUEsQ0FBQ0EsT0FBT0EsRUFBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7QUFDaEdILENBQUNBO0FBRUQsSUFBSSxVQUFVLEdBQUc7SUFDZixJQUFJLENBQUMsaUJBQWlCLENBQUM7U0FDbEIsU0FBUyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsUUFBUSxLQUM3RCxJQUFJLGlCQUFpQixDQUFDLEVBQUUsRUFDRjtRQUNFLEVBQUMsU0FBUyxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFDO1FBQzVDLFNBQVMsQ0FBQyxRQUFRLEVBQUU7UUFDcEIsV0FBVztRQUNYLFFBQVE7S0FDVCxFQUNELE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUM1QztRQUNFLE1BQU07UUFDTixPQUFPLENBQUMsU0FBUztRQUNqQixPQUFPLENBQUMsUUFBUTtRQUNoQixPQUFPLENBQUMsVUFBVTtRQUNsQixTQUFTO1FBQ1QsT0FBTyxDQUFDLG1CQUFtQjtRQUMzQixPQUFPLENBQUMsa0JBQWtCO0tBQzNCLENBQUM7Q0FDbEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7U3RyaW5nTWFwV3JhcHBlcn0gZnJvbSAnYW5ndWxhcjIvc3JjL2ZhY2FkZS9jb2xsZWN0aW9uJztcbmltcG9ydCB7YmluZCwgcHJvdmlkZSwgUHJvdmlkZXIsIE9wYXF1ZVRva2VufSBmcm9tICdhbmd1bGFyMi9zcmMvY29yZS9kaSc7XG5pbXBvcnQge1ZhbGlkYXRvcn0gZnJvbSAnLi92YWxpZGF0b3InO1xuaW1wb3J0IHtNZXRyaWN9IGZyb20gJy4vbWV0cmljJztcbmltcG9ydCB7T3B0aW9uc30gZnJvbSAnLi9jb21tb25fb3B0aW9ucyc7XG5cbi8qKlxuICogU2FtcGxlRGVzY3JpcHRpb24gbWVyZ2VzIGFsbCBhdmFpbGFibGUgZGVzY3JpcHRpb25zIGFib3V0IGEgc2FtcGxlXG4gKi9cbmV4cG9ydCBjbGFzcyBTYW1wbGVEZXNjcmlwdGlvbiB7XG4gIC8vIFRPRE8odGJvc2NoKTogdXNlIHN0YXRpYyB2YWx1ZXMgd2hlbiBvdXIgdHJhbnNwaWxlciBzdXBwb3J0cyB0aGVtXG4gIHN0YXRpYyBnZXQgQklORElOR1MoKTogUHJvdmlkZXJbXSB7IHJldHVybiBfUFJPVklERVJTOyB9XG4gIGRlc2NyaXB0aW9uOiB7W2tleTogc3RyaW5nXTogYW55fTtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgaWQ6IHN0cmluZywgZGVzY3JpcHRpb25zOiBBcnJheTx7W2tleTogc3RyaW5nXTogYW55fT4sXG4gICAgICAgICAgICAgIHB1YmxpYyBtZXRyaWNzOiB7W2tleTogc3RyaW5nXTogYW55fSkge1xuICAgIHRoaXMuZGVzY3JpcHRpb24gPSB7fTtcbiAgICBkZXNjcmlwdGlvbnMuZm9yRWFjaChkZXNjcmlwdGlvbiA9PiB7XG4gICAgICBTdHJpbmdNYXBXcmFwcGVyLmZvckVhY2goZGVzY3JpcHRpb24sICh2YWx1ZSwgcHJvcCkgPT4gdGhpcy5kZXNjcmlwdGlvbltwcm9wXSA9IHZhbHVlKTtcbiAgICB9KTtcbiAgfVxuXG4gIHRvSnNvbigpIHsgcmV0dXJuIHsnaWQnOiB0aGlzLmlkLCAnZGVzY3JpcHRpb24nOiB0aGlzLmRlc2NyaXB0aW9uLCAnbWV0cmljcyc6IHRoaXMubWV0cmljc307IH1cbn1cblxudmFyIF9QUk9WSURFUlMgPSBbXG4gIGJpbmQoU2FtcGxlRGVzY3JpcHRpb24pXG4gICAgICAudG9GYWN0b3J5KChtZXRyaWMsIGlkLCBmb3JjZUdjLCB1c2VyQWdlbnQsIHZhbGlkYXRvciwgZGVmYXVsdERlc2MsIHVzZXJEZXNjKSA9PlxuICAgICAgICAgICAgICAgICAgICAgbmV3IFNhbXBsZURlc2NyaXB0aW9uKGlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsnZm9yY2VHYyc6IGZvcmNlR2MsICd1c2VyQWdlbnQnOiB1c2VyQWdlbnR9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yLmRlc2NyaWJlKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0RGVzYyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJEZXNjXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRyaWMuZGVzY3JpYmUoKSksXG4gICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICBNZXRyaWMsXG4gICAgICAgICAgICAgICAgICAgT3B0aW9ucy5TQU1QTEVfSUQsXG4gICAgICAgICAgICAgICAgICAgT3B0aW9ucy5GT1JDRV9HQyxcbiAgICAgICAgICAgICAgICAgICBPcHRpb25zLlVTRVJfQUdFTlQsXG4gICAgICAgICAgICAgICAgICAgVmFsaWRhdG9yLFxuICAgICAgICAgICAgICAgICAgIE9wdGlvbnMuREVGQVVMVF9ERVNDUklQVElPTixcbiAgICAgICAgICAgICAgICAgICBPcHRpb25zLlNBTVBMRV9ERVNDUklQVElPTlxuICAgICAgICAgICAgICAgICBdKVxuXTtcbiJdfQ==