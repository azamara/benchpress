import { ListWrapper } from 'angular2/src/facade/collection';
import { bind, provide, OpaqueToken } from 'angular2/src/core/di';
import { Validator } from '../validator';
/**
 * A validator that waits for the sample to have a certain size.
 */
export class SizeValidator extends Validator {
    constructor(size) {
        super();
        this._sampleSize = size;
    }
    // TODO(tbosch): use static values when our transpiler supports them
    static get BINDINGS() { return _PROVIDERS; }
    // TODO(tbosch): use static values when our transpiler supports them
    static get SAMPLE_SIZE() { return _SAMPLE_SIZE; }
    describe() { return { 'sampleSize': this._sampleSize }; }
    validate(completeSample) {
        if (completeSample.length >= this._sampleSize) {
            return ListWrapper.slice(completeSample, completeSample.length - this._sampleSize, completeSample.length);
        }
        else {
            return null;
        }
    }
}
var _SAMPLE_SIZE = new OpaqueToken('SizeValidator.sampleSize');
var _PROVIDERS = [
    bind(SizeValidator)
        .toFactory((size) => new SizeValidator(size), [_SAMPLE_SIZE]),
    provide(_SAMPLE_SIZE, { useValue: 10 })
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2l6ZV92YWxpZGF0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJiZW5jaHByZXNzL3NyYy92YWxpZGF0b3Ivc2l6ZV92YWxpZGF0b3IudHMiXSwibmFtZXMiOlsiU2l6ZVZhbGlkYXRvciIsIlNpemVWYWxpZGF0b3IuY29uc3RydWN0b3IiLCJTaXplVmFsaWRhdG9yLkJJTkRJTkdTIiwiU2l6ZVZhbGlkYXRvci5TQU1QTEVfU0laRSIsIlNpemVWYWxpZGF0b3IuZGVzY3JpYmUiLCJTaXplVmFsaWRhdG9yLnZhbGlkYXRlIl0sIm1hcHBpbmdzIjoiT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLGdDQUFnQztPQUNuRCxFQUFDLElBQUksRUFBRSxPQUFPLEVBQVksV0FBVyxFQUFDLE1BQU0sc0JBQXNCO09BRWxFLEVBQUMsU0FBUyxFQUFDLE1BQU0sY0FBYztBQUd0Qzs7R0FFRztBQUNILG1DQUFtQyxTQUFTO0lBUTFDQSxZQUFZQSxJQUFJQTtRQUNkQyxPQUFPQSxDQUFDQTtRQUNSQSxJQUFJQSxDQUFDQSxXQUFXQSxHQUFHQSxJQUFJQSxDQUFDQTtJQUMxQkEsQ0FBQ0E7SUFWREQsb0VBQW9FQTtJQUNwRUEsV0FBV0EsUUFBUUEsS0FBaUJFLE1BQU1BLENBQUNBLFVBQVVBLENBQUNBLENBQUNBLENBQUNBO0lBQ3hERixvRUFBb0VBO0lBQ3BFQSxXQUFXQSxXQUFXQSxLQUFLRyxNQUFNQSxDQUFDQSxZQUFZQSxDQUFDQSxDQUFDQSxDQUFDQTtJQVNqREgsUUFBUUEsS0FBMkJJLE1BQU1BLENBQUNBLEVBQUNBLFlBQVlBLEVBQUVBLElBQUlBLENBQUNBLFdBQVdBLEVBQUNBLENBQUNBLENBQUNBLENBQUNBO0lBRTdFSixRQUFRQSxDQUFDQSxjQUErQkE7UUFDdENLLEVBQUVBLENBQUNBLENBQUNBLGNBQWNBLENBQUNBLE1BQU1BLElBQUlBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBLENBQUNBLENBQUNBO1lBQzlDQSxNQUFNQSxDQUFDQSxXQUFXQSxDQUFDQSxLQUFLQSxDQUFDQSxjQUFjQSxFQUFFQSxjQUFjQSxDQUFDQSxNQUFNQSxHQUFHQSxJQUFJQSxDQUFDQSxXQUFXQSxFQUN4REEsY0FBY0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0E7UUFDbERBLENBQUNBO1FBQUNBLElBQUlBLENBQUNBLENBQUNBO1lBQ05BLE1BQU1BLENBQUNBLElBQUlBLENBQUNBO1FBQ2RBLENBQUNBO0lBQ0hBLENBQUNBO0FBQ0hMLENBQUNBO0FBRUQsSUFBSSxZQUFZLEdBQUcsSUFBSSxXQUFXLENBQUMsMEJBQTBCLENBQUMsQ0FBQztBQUMvRCxJQUFJLFVBQVUsR0FBRztJQUNmLElBQUksQ0FBQyxhQUFhLENBQUM7U0FDZCxTQUFTLENBQUMsQ0FBQyxJQUFJLEtBQUssSUFBSSxhQUFhLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNqRSxPQUFPLENBQUMsWUFBWSxFQUFFLEVBQUMsUUFBUSxFQUFFLEVBQUUsRUFBQyxDQUFDO0NBQ3RDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0xpc3RXcmFwcGVyfSBmcm9tICdhbmd1bGFyMi9zcmMvZmFjYWRlL2NvbGxlY3Rpb24nO1xuaW1wb3J0IHtiaW5kLCBwcm92aWRlLCBQcm92aWRlciwgT3BhcXVlVG9rZW59IGZyb20gJ2FuZ3VsYXIyL3NyYy9jb3JlL2RpJztcblxuaW1wb3J0IHtWYWxpZGF0b3J9IGZyb20gJy4uL3ZhbGlkYXRvcic7XG5pbXBvcnQge01lYXN1cmVWYWx1ZXN9IGZyb20gJy4uL21lYXN1cmVfdmFsdWVzJztcblxuLyoqXG4gKiBBIHZhbGlkYXRvciB0aGF0IHdhaXRzIGZvciB0aGUgc2FtcGxlIHRvIGhhdmUgYSBjZXJ0YWluIHNpemUuXG4gKi9cbmV4cG9ydCBjbGFzcyBTaXplVmFsaWRhdG9yIGV4dGVuZHMgVmFsaWRhdG9yIHtcbiAgLy8gVE9ETyh0Ym9zY2gpOiB1c2Ugc3RhdGljIHZhbHVlcyB3aGVuIG91ciB0cmFuc3BpbGVyIHN1cHBvcnRzIHRoZW1cbiAgc3RhdGljIGdldCBCSU5ESU5HUygpOiBQcm92aWRlcltdIHsgcmV0dXJuIF9QUk9WSURFUlM7IH1cbiAgLy8gVE9ETyh0Ym9zY2gpOiB1c2Ugc3RhdGljIHZhbHVlcyB3aGVuIG91ciB0cmFuc3BpbGVyIHN1cHBvcnRzIHRoZW1cbiAgc3RhdGljIGdldCBTQU1QTEVfU0laRSgpIHsgcmV0dXJuIF9TQU1QTEVfU0laRTsgfVxuXG4gIF9zYW1wbGVTaXplOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3Ioc2l6ZSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc2FtcGxlU2l6ZSA9IHNpemU7XG4gIH1cblxuICBkZXNjcmliZSgpOiB7W2tleTogc3RyaW5nXTogYW55fSB7IHJldHVybiB7J3NhbXBsZVNpemUnOiB0aGlzLl9zYW1wbGVTaXplfTsgfVxuXG4gIHZhbGlkYXRlKGNvbXBsZXRlU2FtcGxlOiBNZWFzdXJlVmFsdWVzW10pOiBNZWFzdXJlVmFsdWVzW10ge1xuICAgIGlmIChjb21wbGV0ZVNhbXBsZS5sZW5ndGggPj0gdGhpcy5fc2FtcGxlU2l6ZSkge1xuICAgICAgcmV0dXJuIExpc3RXcmFwcGVyLnNsaWNlKGNvbXBsZXRlU2FtcGxlLCBjb21wbGV0ZVNhbXBsZS5sZW5ndGggLSB0aGlzLl9zYW1wbGVTaXplLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlU2FtcGxlLmxlbmd0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxufVxuXG52YXIgX1NBTVBMRV9TSVpFID0gbmV3IE9wYXF1ZVRva2VuKCdTaXplVmFsaWRhdG9yLnNhbXBsZVNpemUnKTtcbnZhciBfUFJPVklERVJTID0gW1xuICBiaW5kKFNpemVWYWxpZGF0b3IpXG4gICAgICAudG9GYWN0b3J5KChzaXplKSA9PiBuZXcgU2l6ZVZhbGlkYXRvcihzaXplKSwgW19TQU1QTEVfU0laRV0pLFxuICBwcm92aWRlKF9TQU1QTEVfU0laRSwge3VzZVZhbHVlOiAxMH0pXG5dO1xuIl19