import { bind } from 'angular2/src/core/di';
import { isPresent, StringWrapper } from 'angular2/src/facade/lang';
import { WebDriverExtension, PerfLogFeatures } from '../web_driver_extension';
import { WebDriverAdapter } from '../web_driver_adapter';
export class FirefoxDriverExtension extends WebDriverExtension {
    constructor(_driver) {
        super();
        this._driver = _driver;
        this._profilerStarted = false;
    }
    static get BINDINGS() { return _PROVIDERS; }
    gc() { return this._driver.executeScript('window.forceGC()'); }
    timeBegin(name) {
        if (!this._profilerStarted) {
            this._profilerStarted = true;
            this._driver.executeScript('window.startProfiler();');
        }
        return this._driver.executeScript('window.markStart("' + name + '");');
    }
    timeEnd(name, restartName = null) {
        var script = 'window.markEnd("' + name + '");';
        if (isPresent(restartName)) {
            script += 'window.markStart("' + restartName + '");';
        }
        return this._driver.executeScript(script);
    }
    readPerfLog() {
        return this._driver.executeAsyncScript('var cb = arguments[0]; window.getProfile(cb);');
    }
    perfLogFeatures() { return new PerfLogFeatures({ render: true, gc: true }); }
    supports(capabilities) {
        return StringWrapper.equals(capabilities['browserName'].toLowerCase(), 'firefox');
    }
}
var _PROVIDERS = [
    bind(FirefoxDriverExtension)
        .toFactory((driver) => new FirefoxDriverExtension(driver), [WebDriverAdapter])
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlyZWZveF9kcml2ZXJfZXh0ZW5zaW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYmVuY2hwcmVzcy9zcmMvd2ViZHJpdmVyL2ZpcmVmb3hfZHJpdmVyX2V4dGVuc2lvbi50cyJdLCJuYW1lcyI6WyJGaXJlZm94RHJpdmVyRXh0ZW5zaW9uIiwiRmlyZWZveERyaXZlckV4dGVuc2lvbi5jb25zdHJ1Y3RvciIsIkZpcmVmb3hEcml2ZXJFeHRlbnNpb24uQklORElOR1MiLCJGaXJlZm94RHJpdmVyRXh0ZW5zaW9uLmdjIiwiRmlyZWZveERyaXZlckV4dGVuc2lvbi50aW1lQmVnaW4iLCJGaXJlZm94RHJpdmVyRXh0ZW5zaW9uLnRpbWVFbmQiLCJGaXJlZm94RHJpdmVyRXh0ZW5zaW9uLnJlYWRQZXJmTG9nIiwiRmlyZWZveERyaXZlckV4dGVuc2lvbi5wZXJmTG9nRmVhdHVyZXMiLCJGaXJlZm94RHJpdmVyRXh0ZW5zaW9uLnN1cHBvcnRzIl0sIm1hcHBpbmdzIjoiT0FBTyxFQUFDLElBQUksRUFBb0IsTUFBTSxzQkFBc0I7T0FDckQsRUFBQyxTQUFTLEVBQUUsYUFBYSxFQUFDLE1BQU0sMEJBQTBCO09BQzFELEVBQUMsa0JBQWtCLEVBQUUsZUFBZSxFQUFDLE1BQU0seUJBQXlCO09BQ3BFLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSx1QkFBdUI7QUFHdEQsNENBQTRDLGtCQUFrQjtJQUs1REEsWUFBb0JBLE9BQXlCQTtRQUMzQ0MsT0FBT0EsQ0FBQ0E7UUFEVUEsWUFBT0EsR0FBUEEsT0FBT0EsQ0FBa0JBO1FBRTNDQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLEdBQUdBLEtBQUtBLENBQUNBO0lBQ2hDQSxDQUFDQTtJQVBERCxXQUFXQSxRQUFRQSxLQUFpQkUsTUFBTUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFTeERGLEVBQUVBLEtBQUtHLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLGFBQWFBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFFL0RILFNBQVNBLENBQUNBLElBQVlBO1FBQ3BCSSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLENBQUNBLENBQUNBLENBQUNBO1lBQzNCQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLEdBQUdBLElBQUlBLENBQUNBO1lBQzdCQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxhQUFhQSxDQUFDQSx5QkFBeUJBLENBQUNBLENBQUNBO1FBQ3hEQSxDQUFDQTtRQUNEQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxhQUFhQSxDQUFDQSxvQkFBb0JBLEdBQUdBLElBQUlBLEdBQUdBLEtBQUtBLENBQUNBLENBQUNBO0lBQ3pFQSxDQUFDQTtJQUVESixPQUFPQSxDQUFDQSxJQUFZQSxFQUFFQSxXQUFXQSxHQUFXQSxJQUFJQTtRQUM5Q0ssSUFBSUEsTUFBTUEsR0FBR0Esa0JBQWtCQSxHQUFHQSxJQUFJQSxHQUFHQSxLQUFLQSxDQUFDQTtRQUMvQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsU0FBU0EsQ0FBQ0EsV0FBV0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDM0JBLE1BQU1BLElBQUlBLG9CQUFvQkEsR0FBR0EsV0FBV0EsR0FBR0EsS0FBS0EsQ0FBQ0E7UUFDdkRBLENBQUNBO1FBQ0RBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLGFBQWFBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBO0lBQzVDQSxDQUFDQTtJQUVETCxXQUFXQTtRQUNUTSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxrQkFBa0JBLENBQUNBLCtDQUErQ0EsQ0FBQ0EsQ0FBQ0E7SUFDMUZBLENBQUNBO0lBRUROLGVBQWVBLEtBQXNCTyxNQUFNQSxDQUFDQSxJQUFJQSxlQUFlQSxDQUFDQSxFQUFDQSxNQUFNQSxFQUFFQSxJQUFJQSxFQUFFQSxFQUFFQSxFQUFFQSxJQUFJQSxFQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtJQUU1RlAsUUFBUUEsQ0FBQ0EsWUFBa0NBO1FBQ3pDUSxNQUFNQSxDQUFDQSxhQUFhQSxDQUFDQSxNQUFNQSxDQUFDQSxZQUFZQSxDQUFDQSxhQUFhQSxDQUFDQSxDQUFDQSxXQUFXQSxFQUFFQSxFQUFFQSxTQUFTQSxDQUFDQSxDQUFDQTtJQUNwRkEsQ0FBQ0E7QUFDSFIsQ0FBQ0E7QUFFRCxJQUFJLFVBQVUsR0FBRztJQUNmLElBQUksQ0FBQyxzQkFBc0IsQ0FBQztTQUN2QixTQUFTLENBQUMsQ0FBQyxNQUFNLEtBQUssSUFBSSxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLGdCQUFnQixDQUFDLENBQUM7Q0FDbkYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7YmluZCwgcHJvdmlkZSwgUHJvdmlkZXJ9IGZyb20gJ2FuZ3VsYXIyL3NyYy9jb3JlL2RpJztcbmltcG9ydCB7aXNQcmVzZW50LCBTdHJpbmdXcmFwcGVyfSBmcm9tICdhbmd1bGFyMi9zcmMvZmFjYWRlL2xhbmcnO1xuaW1wb3J0IHtXZWJEcml2ZXJFeHRlbnNpb24sIFBlcmZMb2dGZWF0dXJlc30gZnJvbSAnLi4vd2ViX2RyaXZlcl9leHRlbnNpb24nO1xuaW1wb3J0IHtXZWJEcml2ZXJBZGFwdGVyfSBmcm9tICcuLi93ZWJfZHJpdmVyX2FkYXB0ZXInO1xuaW1wb3J0IHtQcm9taXNlfSBmcm9tICdhbmd1bGFyMi9zcmMvZmFjYWRlL2FzeW5jJztcblxuZXhwb3J0IGNsYXNzIEZpcmVmb3hEcml2ZXJFeHRlbnNpb24gZXh0ZW5kcyBXZWJEcml2ZXJFeHRlbnNpb24ge1xuICBzdGF0aWMgZ2V0IEJJTkRJTkdTKCk6IFByb3ZpZGVyW10geyByZXR1cm4gX1BST1ZJREVSUzsgfVxuXG4gIHByaXZhdGUgX3Byb2ZpbGVyU3RhcnRlZDogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9kcml2ZXI6IFdlYkRyaXZlckFkYXB0ZXIpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3Byb2ZpbGVyU3RhcnRlZCA9IGZhbHNlO1xuICB9XG5cbiAgZ2MoKSB7IHJldHVybiB0aGlzLl9kcml2ZXIuZXhlY3V0ZVNjcmlwdCgnd2luZG93LmZvcmNlR0MoKScpOyB9XG5cbiAgdGltZUJlZ2luKG5hbWU6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgaWYgKCF0aGlzLl9wcm9maWxlclN0YXJ0ZWQpIHtcbiAgICAgIHRoaXMuX3Byb2ZpbGVyU3RhcnRlZCA9IHRydWU7XG4gICAgICB0aGlzLl9kcml2ZXIuZXhlY3V0ZVNjcmlwdCgnd2luZG93LnN0YXJ0UHJvZmlsZXIoKTsnKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2RyaXZlci5leGVjdXRlU2NyaXB0KCd3aW5kb3cubWFya1N0YXJ0KFwiJyArIG5hbWUgKyAnXCIpOycpO1xuICB9XG5cbiAgdGltZUVuZChuYW1lOiBzdHJpbmcsIHJlc3RhcnROYW1lOiBzdHJpbmcgPSBudWxsKTogUHJvbWlzZTxhbnk+IHtcbiAgICB2YXIgc2NyaXB0ID0gJ3dpbmRvdy5tYXJrRW5kKFwiJyArIG5hbWUgKyAnXCIpOyc7XG4gICAgaWYgKGlzUHJlc2VudChyZXN0YXJ0TmFtZSkpIHtcbiAgICAgIHNjcmlwdCArPSAnd2luZG93Lm1hcmtTdGFydChcIicgKyByZXN0YXJ0TmFtZSArICdcIik7JztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2RyaXZlci5leGVjdXRlU2NyaXB0KHNjcmlwdCk7XG4gIH1cblxuICByZWFkUGVyZkxvZygpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLl9kcml2ZXIuZXhlY3V0ZUFzeW5jU2NyaXB0KCd2YXIgY2IgPSBhcmd1bWVudHNbMF07IHdpbmRvdy5nZXRQcm9maWxlKGNiKTsnKTtcbiAgfVxuXG4gIHBlcmZMb2dGZWF0dXJlcygpOiBQZXJmTG9nRmVhdHVyZXMgeyByZXR1cm4gbmV3IFBlcmZMb2dGZWF0dXJlcyh7cmVuZGVyOiB0cnVlLCBnYzogdHJ1ZX0pOyB9XG5cbiAgc3VwcG9ydHMoY2FwYWJpbGl0aWVzOiB7W2tleTogc3RyaW5nXTogYW55fSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBTdHJpbmdXcmFwcGVyLmVxdWFscyhjYXBhYmlsaXRpZXNbJ2Jyb3dzZXJOYW1lJ10udG9Mb3dlckNhc2UoKSwgJ2ZpcmVmb3gnKTtcbiAgfVxufVxuXG52YXIgX1BST1ZJREVSUyA9IFtcbiAgYmluZChGaXJlZm94RHJpdmVyRXh0ZW5zaW9uKVxuICAgICAgLnRvRmFjdG9yeSgoZHJpdmVyKSA9PiBuZXcgRmlyZWZveERyaXZlckV4dGVuc2lvbihkcml2ZXIpLCBbV2ViRHJpdmVyQWRhcHRlcl0pXG5dO1xuIl19